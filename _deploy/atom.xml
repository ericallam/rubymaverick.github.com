<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Rubymaverick]]></title>
  <link href="http://rubymaverick.com/atom.xml" rel="self"/>
  <link href="http://rubymaverick.com/"/>
  <updated>2012-10-21T14:11:24-04:00</updated>
  <id>http://rubymaverick.com/</id>
  <author>
    <name><![CDATA[Eric Allam]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Setting up KIF Integration Tests for iOS]]></title>
    <link href="http://rubymaverick.com/blog/2012/10/21/setting-up-kif-integration-tests-for-ios/"/>
    <updated>2012-10-21T12:03:00-04:00</updated>
    <id>http://rubymaverick.com/blog/2012/10/21/setting-up-kif-integration-tests-for-ios</id>
    <content type="html"><![CDATA[<p>Square released a pretty neat Integration Testing library called <a href="https://github.com/square/KIF">KIF</a> last year and we have been using it to test the challenges for our upcoming <a href="http://kickstarter.codeschool.com">Try iOS</a> course on <a href="http://www.codeschool.com/courses">Code School</a>.  The instructions in the KIF <a href="https://github.com/square/KIF/blob/master/README.md">README</a> on setting up an Xcode 4 project are missing a couple of crucial steps, and after much Googling and Stackoverflowing I finally figured out how to get it to work, so I figured I&#8217;d share the process we are using for setting up KIF projects.</p>

<p>I&#8217;m assuming you already have an Xcode 4 (version 4.5.1) project that you want to add KIF to. First, if you aren&#8217;t already working with an Xcode workspace, you will need to create one for this project.  To do so, choose the &#8220;Save as Workspace&#8221; menu item:</p>

<p><img src="http://f.cl.ly/items/0j1A2b3Y132K2S2F0G1r/Resized%20Screen%202012-10-21%20at%2012.13.49%20PM.png" alt="image" /></p>

<p>You need a workspace so you can manage both your original project (in my example InstagramClone), and the KIF project we are about to add the the workspace. For more on workspaces check out <a href="http://developer.apple.com/library/ios/#featuredarticles/XcodeConcepts/Concept-Workspace.html">this Apple doc</a>.</p>

<p>Next, you&#8217;ll want to download the KIF project from their <a href="https://github.com/square/KIF/downloads">downloads page</a>, and copy the files inside of a &#8220;Frameworks&#8221; directory under the Project Root.</p>

<p><img src="http://f.cl.ly/items/3Y1p0H471A381R2I0O43/Resized%20Screen%202012-10-21%20at%2012.19.56%20PM.png" alt="image" /></p>

<p>Next, go back to Xcode and command-click on empty area in the Project Navigator (âŒ˜1), and choose &#8220;Add Files to Project&#8221;:</p>

<p><img src="http://f.cl.ly/items/1H37001a061B460V2o0b/Resized%20Screen%202012-10-21%20at%2012.21.08%20PM.png" alt="image" /></p>

<p>Navigate and select the &#8220;KIF.xcodeproj&#8221; file under Project Root->Frameworks->KIF.  Now the Project Navigator should look like you have two projects on equal footing:</p>

<p><img src="http://f.cl.ly/items/1t0222422N0u3H143f0q/Resized%20Screen%202012-10-21%20at%2012.27.00%20PM.png" alt="image" /></p>

<p>This is important, at this point it should not look like the &#8220;KIF&#8221; project is under the &#8220;InstagramClone&#8221; project.</p>

<p>Next, select your project in the Project Navigator and you should see information about Projects and Targetings in the main content area.  Command-click on your app target and choose &#8220;Duplicate&#8221;:</p>

<p><img src="http://f.cl.ly/items/392A1v290G1t152o1I41/Resized%20Screen%202012-10-21%20at%2012.31.19%20PM.png" alt="image" /></p>

<p>Then choose &#8220;Duplicate Only&#8221;:</p>

<p><img src="http://f.cl.ly/items/042Y0d1D2A2b1e2u1j3x/Resized%20Screen%202012-10-21%20at%2012.32.10%20PM.png" alt="image" /></p>

<p>You should see a new target named &#8220;PROJECTNAME Copy&#8221;. Select the target, press Enter, and change the name to something like &#8220;Integration Tests&#8221;:</p>

<p><img src="http://f.cl.ly/items/3C2g0m0l0k1p3C3h332k/Resized%20Screen%202012-10-21%20at%2012.33.52%20PM.png" alt="image" /></p>

<p>With the &#8220;Integration Tests&#8221; target selected, go to the &#8220;Build Phases&#8221; panel, expand the &#8220;Link Binary With Libraries&#8221; section, and click the little &#8220;+&#8221; button.  Select the &#8220;libKif.a&#8221; binary from the list and add it:</p>

<p><img src="http://f.cl.ly/items/3U462R3e0H2h2O091a3N/Resized%20Screen%202012-10-21%20at%2012.37.01%20PM.png" alt="image" /></p>

<p>Still with the &#8220;Integration Tests&#8221; target selected, go to the &#8220;Build Settings&#8221; panel.  Make sure you have &#8220;All&#8221; and &#8220;Combined&#8221; selected:</p>

<p><img src="http://f.cl.ly/items/0U02000V1U400O1W421u/Resized%20Screen%202012-10-21%20at%2012.41.54%20PM.png" alt="image" /></p>

<p>Search for the &#8220;Header Search Paths&#8221; and edit the setting to add <code>$(inherited)</code> and <code>$(SRCROOT)/Frameworks/KIF</code>, like so:</p>

<p><img src="http://f.cl.ly/items/3f1c1g0G3F2F0H0P2X1O/Resized%20Screen%202012-10-21%20at%2012.44.43%20PM.png" alt="image" /></p>

<p>Search for the &#8220;Other Linker Flags&#8221; setting and edit to add these flags:</p>

<p><img src="http://f.cl.ly/items/0j0g2H371P2I2M3S2y1k/Resized%20Screen%202012-10-21%20at%2012.47.12%20PM.png" alt="image" /></p>

<p>Next, add the <code>RUN_KIF_TESTS=1</code> Preprocessor Macro to both the &#8220;Release&#8221; and &#8220;Debug&#8221; targets, like so:</p>

<p><img src="http://f.cl.ly/items/3P2U1t1e3p1r272k1a0d/Resized%20Screen%202012-10-21%20at%2012.50.08%20PM.png" alt="image" /></p>

<p>Now that we&#8217;ve configured the &#8220;Integration Tests&#8221; target correctly, we need to make sure that before Xcode builds the target, it also builds the KIF project.  To do this we need to do a couple of things (this is what you won&#8217;t find in the instructions provided by Square).</p>

<p>First, we need to edit the &#8220;PROJECTNAME Copy&#8221; Xcode Scheme to tell it to build KIF.  To do that, go to &#8220;Edit Schemes&#8221; and select the &#8220;PROJECTNAME Copy&#8221; scheme.  Choose the &#8220;Build&#8221; phase.  You should see something like this:</p>

<p><img src="http://f.cl.ly/items/0F0q0G1H2L2d1P440u04/Resized%20Screen%202012-10-21%20at%2012.52.21%20PM.png" alt="image" /></p>

<p>Click on the little &#8220;+&#8221; button right above the &#8220;Manage Schemes&#8221; button, and Add the &#8220;KIF&#8221; target:</p>

<p><img src="http://f.cl.ly/items/3n2i2m260X2P442W050b/Resized%20Screen%202012-10-21%20at%2012.57.12%20PM.png" alt="image" /></p>

<p>Close the &#8220;Edit Schemes&#8221; dialog and go back to the Project Navigator.  Click and Drag the &#8220;KIF&#8221; project to under your App project.  In the dialog that appears, select both your app target and the &#8220;Integration&#8221; Tests target in the &#8220;Add to targets&#8221; section:</p>

<p><img src="http://f.cl.ly/items/1v2y1w3J2S3v151o1T0Y/Resized%20Screen%202012-10-21%20at%2012.59.29%20PM.png" alt="image" /></p>

<p>After clicking &#8220;Finish&#8221; your Project Navigator should look like this:</p>

<p><img src="http://f.cl.ly/items/0s3m3l0i0i2K0L2y3w1z/Resized%20Screen%202012-10-21%20at%2012.59.37%20PM.png" alt="image" />.</p>

<p>Now you should be able to follow the rest of Square&#8217;s instructions for adding the Controller, Scenario, and Step files to test your app in the &#8220;Example&#8221; section of their <a href="https://github.com/square/KIF/blob/master/README.md">README</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go Native or Go Home]]></title>
    <link href="http://rubymaverick.com/blog/2012/08/22/go-native-or-go-home/"/>
    <updated>2012-08-22T10:48:00-04:00</updated>
    <id>http://rubymaverick.com/blog/2012/08/22/go-native-or-go-home</id>
    <content type="html"><![CDATA[<p>Flash, the once poster-child of the mobile cross-platform cabal, is finally <a href="http://blogs.adobe.com/flashplayer/2012/06/flash-player-and-android-update.html">dead on android</a>.  A little over 2 years ago Steve Jobs wrote down his <a href="http://www.apple.com/hotnews/thoughts-on-flash/">Thoughts on Flash</a>, a reasonable attempt to explain to the programming world why the iPhone and iPad did not ship with Flash.  And looking back, he was right: Flash wasn&#8217;t ready.  It never become &#8220;ready&#8221;, even 2 years later.</p>

<p>Jobs wrote down <em>six</em> reasons why iOS didn&#8217;t have Flash, and much ink was spilled by tech writers at the time over the first five.  Whether or not Flash interfaces worked with touch screens, the use of Flash for video, whether Flash drained battery, security, performance, the &#8220;openness&#8221; of Flash, etc.</p>

<p>But the sixth reason, by Jobs&#8217;s own admission, is the most important one.  Apple didn&#8217;t want developers on their platform to use Flash to build apps.  Here, in his own words:</p>

<blockquote><p>We know from painful experience that letting a third party layer of software come between the platform and the developer ultimately results in sub-standard apps and hinders the enhancement and progress of the platform. If developers grow dependent on third party development libraries and tools, they can only take advantage of platform enhancements if and when the third party chooses to adopt the new features. We cannot be at the mercy of a third party deciding if and when they will make our enhancements available to our developers.</p>

<p>This becomes even worse if the third party is supplying a cross platform development tool. The third party may not adopt enhancements from one platform unless they are available on all of their supported platforms. Hence developers only have access to the lowest common denominator set of features. Again, we cannot accept an outcome where developers are blocked from using our innovations and enhancements because they are not available on our competitorâ€™s platforms.</p></blockquote>

<p>This still holds true today.  Whether you use <a href="http://phonegap.com/">PhoneGap</a>, <a href="http://www.appcelerator.com/">AppCelerator</a>, or even <a href="http://www.rubymotion.com/">RubyMotion</a>, you are relying on a third party to supply you with the developer tools for a platform they don&#8217;t control.  In RubyMotion&#8217;s case, you can take some comfort that they only support iOS and thus won&#8217;t fall into cross-platform least-common-denominator purgatory.  But you can still find yourself in the situation where RubyMotion, or whatever framework you use on top of RubyMotion, falls behind the APIs developed by Apple.</p>

<p>But the tug of the iOS platform is <a href="http://www.inquisitr.com/252304/apple-announces-30-billion-app-downloads-5-billion-paid-to-developers/">strong</a>, and it&#8217;s tempting to take the PhoneGap or AppCelerator shortcut, and just write your App in HTML+CSS+Javascript.  Don&#8217;t.  Take some time <a href="http://www.kickstarter.com/projects/eallam/try-ios-iphone-app-development-course">learn how to write iOS applications using Objective-C</a>.</p>

<p>It&#8217;s not as hard as you think.  Don&#8217;t let your overzealous pattern-matching reflex blind you to the fact that just because smartphones <em>are</em> computers, people will be <em>okay</em> with sub-standard, cross-platform web apps. They are slow and don&#8217;t take advantage of the richness of the phone&#8217;s capabilities and speed.  You <em>sit down</em> at your computer, so a few hundred milliseconds here and there are no big deal.  People expect more out of the computer that goes everywhere with them (even to bed).  It needs to be an extension of themselves.  A couple hundred milliseconds of lag is not acceptable on a smartphone.  Facebook found that out <a href="https://www.facebook.com/notes/facebook-engineering/under-the-hood-rebuilding-facebook-for-ios/10151036091753920">the hard way</a>:</p>

<blockquote><p>So while utilizing web technology has allowed us to support more than 500 million people using Facebook on more than 7000 supported devices, we realized that when it comes to platforms like iOS, people expect a fast, reliable experience and our iOS app was falling short. Now that our mobile services had breadth, we wanted depth. So, we rewrote Facebook for iOS from the ground up (I really did open up Xcode and click &#8220;New Project&#8221;) with a focus on quality and leveraging the advances that have been made in iOS development.</p></blockquote>

<p>This is why I want to create <a href="http://www.kickstarter.com/projects/eallam/try-ios-iphone-app-development-course">awesome iOS development learning resources</a> so there will be no excuse left not to create native applications for iOS.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kickstarter Project: Try iOS]]></title>
    <link href="http://rubymaverick.com/blog/2012/07/30/kickstarter-project-try-ios/"/>
    <updated>2012-07-30T09:21:00-04:00</updated>
    <id>http://rubymaverick.com/blog/2012/07/30/kickstarter-project-try-ios</id>
    <content type="html"><![CDATA[<p>I&#8217;ve wanted to do a <a href="http://kickstarter.com">Kickstarter</a> project ever since I backed my friend Doug&#8217;s first attempt at funding the rest of <a href="http://www.kickstarter.com/projects/dougroos/the-sky-has-fallen-a-post-apocalyptic-love-story-i-0">his movie</a> (a deserving project if there was ever one).  Today, because I work with the <a href="http://envylabs.com/team">best team</a>, and because we are lucky enough to work on <a href="http://www.codeschool.com">something people love</a>, I was able to launch a <a href="http://www.kickstarter.com/projects/eallam/try-ios-iphone-app-development-course">Kickstarter project</a> to build a <a href="http://www.codeschool.com">Code School</a> course to help people learn iPhone Development.</p>

<iframe width="480" height="360" src="http://www.kickstarter.com/projects/eallam/try-ios-iphone-app-development-course/widget/video.html" frameborder="0"> </iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Steve Jobs on Learning to Code]]></title>
    <link href="http://rubymaverick.com/blog/2012/07/10/steve-jobs-on-learning-to-code/"/>
    <updated>2012-07-10T21:58:00-04:00</updated>
    <id>http://rubymaverick.com/blog/2012/07/10/steve-jobs-on-learning-to-code</id>
    <content type="html"><![CDATA[<p>In the recently released <a href="http://itunes.apple.com/us/movie/steve-jobs-the-lost-interview/id536749587">1995 &#8220;Lost Interview&#8221;</a> with Steve Jobs, Robert (X?) Cringely asks Steve what kind of things people were using his Apple II&#8217;s for.  His answer:</p>

<blockquote><p>Much more importantly, it had nothing to do with using them for anything practical, it had to do with using them to be a mirror of your thought process, to actually learn how to think.  I think the greatest value in learning how to, I think that everybody in this country should learn how to program a computer, should learn a computer language.  Because it teaches you how to think&#8230;I view computer science as a liberal art.</p><footer><strong>Steve Jobs</strong> <cite><a href='http://itunes.apple.com/us/movie/steve-jobs-the-lost-interview/id536749587'>The Lost Interview</a></cite></footer></blockquote>


<p>We&#8217;re not there yet Steve, but we&#8217;re close.</p>
]]></content>
  </entry>
  
</feed>
